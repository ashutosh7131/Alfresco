{"version":3,"file":"document-list.service.d.ts","sources":["document-list.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AlfrescoApiService, ContentService, LogService, PaginationModel } from '@alfresco/adf-core';\nimport { NodeEntry, NodePaging, NodesApi } from '@alfresco/js-api';\nimport { DocumentLoaderNode } from '../models/document-folder.model';\nimport { Observable } from 'rxjs';\nimport { DocumentListLoader } from '../interfaces/document-list-loader.interface';\nimport { CustomResourcesService } from './custom-resources.service';\nexport declare class DocumentListService implements DocumentListLoader {\n    private contentService;\n    private apiService;\n    private logService;\n    private customResourcesService;\n    static ROOT_ID: string;\n    _nodesApi: NodesApi;\n    get nodes(): NodesApi;\n    constructor(contentService: ContentService, apiService: AlfrescoApiService, logService: LogService, customResourcesService: CustomResourcesService);\n    deleteNode(nodeId: string): Observable<any>;\n    copyNode(nodeId: string, targetParentId: string): Observable<NodeEntry>;\n    moveNode(nodeId: string, targetParentId: string): Observable<NodeEntry>;\n    getFolder(folder: string, opts?: any, includeFields?: string[]): Observable<NodePaging>;\n    getNode(nodeId: string, includeFields?: string[]): Observable<NodeEntry>;\n    getFolderNode(nodeId: string, includeFields?: string[]): Observable<NodeEntry>;\n    isCustomSourceService(nodeId: any): boolean;\n    loadFolderByNodeId(nodeId: string, pagination: PaginationModel, includeFields: string[], where?: string, orderBy?: string[]): Observable<DocumentLoaderNode>;\n    private retrieveDocumentNode;\n    private handleError;\n}\n"]}