/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService, PaginationModel } from '@alfresco/adf-core';
import { NodePaging, DeletedNodesPaging, SharedLinkPaging, SiteMemberPaging, PeopleApi, SitesApi, SearchApi, FavoritesApi, SharedlinksApi, TrashcanApi, NodesApi } from '@alfresco/js-api';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class CustomResourcesService {
    private apiService;
    private logService;
    private CREATE_PERMISSION;
    _peopleApi: PeopleApi;
    get peopleApi(): PeopleApi;
    _sitesApi: SitesApi;
    get sitesApi(): SitesApi;
    _trashcanApi: TrashcanApi;
    get trashcanApi(): TrashcanApi;
    _searchApi: SearchApi;
    get searchApi(): SearchApi;
    _sharedLinksApi: SharedlinksApi;
    get sharedLinksApi(): SharedlinksApi;
    _favoritesApi: FavoritesApi;
    get favoritesApi(): FavoritesApi;
    _nodesApi: NodesApi;
    get nodesApi(): NodesApi;
    constructor(apiService: AlfrescoApiService, logService: LogService);
    getRecentFiles(personId: string, pagination: PaginationModel, filters?: string[]): Observable<NodePaging>;
    loadFavorites(pagination: PaginationModel, includeFields?: string[], where?: string): Observable<NodePaging>;
    loadMemberSites(pagination: PaginationModel, where?: string): Observable<SiteMemberPaging>;
    loadSites(pagination: PaginationModel, where?: string): Observable<NodePaging>;
    loadTrashcan(pagination: PaginationModel, includeFields?: string[]): Observable<DeletedNodesPaging>;
    loadSharedLinks(pagination: PaginationModel, includeFields?: string[], where?: string): Observable<SharedLinkPaging>;
    isCustomSource(folderId: string): boolean;
    isSupportedSource(folderId: string): boolean;
    loadFolderByNodeId(nodeId: string, pagination: PaginationModel, includeFields?: string[], where?: string): any;
    getCorrespondingNodeIds(nodeId: string, pagination?: PaginationModel): Observable<string[]>;
    getIdFromEntry(node: any, nodeId: string): string;
    hasCorrespondingNodeIds(nodeId: string): boolean;
    private getIncludesFields;
    private handleError;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CustomResourcesService, never>;
}

//# sourceMappingURL=custom-resources.service.d.ts.map