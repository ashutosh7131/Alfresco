/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, ContentService, LogService, PaginationModel } from '@alfresco/adf-core';
import { NodeEntry, NodePaging, NodesApi } from '@alfresco/js-api';
import { DocumentLoaderNode } from '../models/document-folder.model';
import { Observable } from 'rxjs';
import { DocumentListLoader } from '../interfaces/document-list-loader.interface';
import { CustomResourcesService } from './custom-resources.service';
import * as ɵngcc0 from '@angular/core';
export declare class DocumentListService implements DocumentListLoader {
    private contentService;
    private apiService;
    private logService;
    private customResourcesService;
    static ROOT_ID: string;
    _nodesApi: NodesApi;
    get nodes(): NodesApi;
    constructor(contentService: ContentService, apiService: AlfrescoApiService, logService: LogService, customResourcesService: CustomResourcesService);
    deleteNode(nodeId: string): Observable<any>;
    copyNode(nodeId: string, targetParentId: string): Observable<NodeEntry>;
    moveNode(nodeId: string, targetParentId: string): Observable<NodeEntry>;
    getFolder(folder: string, opts?: any, includeFields?: string[]): Observable<NodePaging>;
    getNode(nodeId: string, includeFields?: string[]): Observable<NodeEntry>;
    getFolderNode(nodeId: string, includeFields?: string[]): Observable<NodeEntry>;
    isCustomSourceService(nodeId: any): boolean;
    loadFolderByNodeId(nodeId: string, pagination: PaginationModel, includeFields: string[], where?: string, orderBy?: string[]): Observable<DocumentLoaderNode>;
    private retrieveDocumentNode;
    private handleError;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DocumentListService, never>;
}

//# sourceMappingURL=document-list.service.d.ts.map