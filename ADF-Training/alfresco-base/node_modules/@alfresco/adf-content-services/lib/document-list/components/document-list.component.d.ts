/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AfterContentInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { ContentService, DataCellEvent, DataRowActionEvent, DataSorting, DataTableComponent, ShowHeaderMode, PaginatedComponent, AppConfigService, DataColumnListComponent, UserPreferencesService, PaginationModel, ThumbnailService, CustomLoadingContentTemplateDirective, CustomNoPermissionTemplateDirective, CustomEmptyContentTemplateDirective, RequestPaginationModel, AlfrescoApiService, LockService, DataRow } from '@alfresco/adf-core';
import { Node, NodeEntry, NodePaging, NodesApi, Pagination } from '@alfresco/js-api';
import { Subject, BehaviorSubject } from 'rxjs';
import { ShareDataRow } from './../data/share-data-row.model';
import { ShareDataTableAdapter } from './../data/share-datatable-adapter';
import { ContentActionModel } from './../models/content-action.model';
import { PermissionStyleModel } from './../models/permissions-style.model';
import { NodeEntityEvent, NodeEntryEvent } from './node.event';
import { NavigableComponentInterface } from '../../breadcrumb/navigable-component.interface';
import { FilterSearch } from './../../search/models/filter-search.interface';
import { RowFilter } from '../data/row-filter.model';
import { DocumentListService } from '../services/document-list.service';
import * as ɵngcc0 from '@angular/core';
export declare class DocumentListComponent implements OnInit, OnChanges, OnDestroy, AfterContentInit, PaginatedComponent, NavigableComponentInterface {
    private documentListService;
    private ngZone;
    private elementRef;
    private appConfig;
    private userPreferencesService;
    private contentService;
    private thumbnailService;
    private alfrescoApiService;
    private lockService;
    static SINGLE_CLICK_NAVIGATION: string;
    static DOUBLE_CLICK_NAVIGATION: string;
    DEFAULT_PAGINATION: Pagination;
    DEFAULT_SORTING: DataSorting[];
    columnList: DataColumnListComponent;
    customLoadingContent: CustomLoadingContentTemplateDirective;
    customNoPermissionsTemplate: CustomNoPermissionTemplateDirective;
    customNoContentTemplate: CustomEmptyContentTemplateDirective;
    includeFields: string[];
    where: string;
    display: string;
    permissionsStyle: PermissionStyleModel[];
    locationFormat: string;
    navigate: boolean;
    showHeader: ShowHeaderMode;
    navigationMode: string;
    thumbnails: boolean;
    selectionMode: string;
    multiselect: boolean;
    contentActions: boolean;
    contentActionsPosition: string;
    contextMenuActions: boolean;
    emptyFolderImageUrl: string;
    allowDropFiles: boolean;
    sorting: string[] | DataSorting;
    additionalSorting: DataSorting;
    sortingMode: 'server' | 'client';
    rowStyle: {
        [key: string]: any;
    };
    rowStyleClass: string;
    loading: boolean;
    _rowFilter: RowFilter | null;
    set rowFilter(rowFilter: RowFilter);
    get rowFilter(): RowFilter;
    imageResolver: any | null;
    stickyHeader: boolean;
    headerFilters: boolean;
    filterValue: any;
    currentFolderId: string;
    preselectNodes: NodeEntry[];
    node: NodePaging;
    maxItems: number;
    nodeClick: EventEmitter<NodeEntityEvent>;
    nodeDblClick: EventEmitter<NodeEntityEvent>;
    folderChange: EventEmitter<NodeEntryEvent>;
    preview: EventEmitter<NodeEntityEvent>;
    ready: EventEmitter<NodePaging>;
    error: EventEmitter<any>;
    nodeSelected: EventEmitter<NodeEntry[]>;
    filterSelection: EventEmitter<FilterSearch[]>;
    dataTable: DataTableComponent;
    actions: ContentActionModel[];
    contextActionHandler: Subject<any>;
    data: ShareDataTableAdapter;
    noPermission: boolean;
    selection: NodeEntry[];
    $folderNode: Subject<Node>;
    allowFiltering: boolean;
    orderBy: string[];
    preselectedRows: DataRow[];
    folderNode: Node;
    private _pagination;
    pagination: BehaviorSubject<PaginationModel>;
    sortingSubject: BehaviorSubject<DataSorting[]>;
    private layoutPresets;
    private rowMenuCache;
    private loadingTimeout;
    private onDestroy$;
    _nodesApi: NodesApi;
    get nodesApi(): NodesApi;
    constructor(documentListService: DocumentListService, ngZone: NgZone, elementRef: ElementRef, appConfig: AppConfigService, userPreferencesService: UserPreferencesService, contentService: ContentService, thumbnailService: ThumbnailService, alfrescoApiService: AlfrescoApiService, lockService: LockService);
    getContextActions(node: NodeEntry): {
        model: ContentActionModel;
        node: NodeEntry;
        subject: Subject<any>;
    }[];
    get hasCustomLayout(): boolean;
    private getDefaultSorting;
    private getLayoutPreset;
    isMobile(): boolean;
    isEmpty(): boolean;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    private setTableSchema;
    ngOnChanges(changes: SimpleChanges): void;
    reload(): void;
    reloadWithoutResettingSelection(): void;
    contextActionCallback(action: any): void;
    getNodeActions(node: NodeEntry | any): ContentActionModel[];
    private refreshAction;
    private isActionVisible;
    private isActionDisabled;
    onShowContextMenu(e?: Event): void;
    navigateTo(node: Node | string): boolean;
    private getNodeFolderDestinationId;
    private isLinkFolder;
    updateCustomSourceData(nodeId: string): void;
    executeContentAction(node: NodeEntry, action: ContentActionModel): void;
    private setLoadingState;
    loadFolder(): void;
    resetSelection(): void;
    onPageLoaded(nodePaging: NodePaging): void;
    onSortingChanged(event: CustomEvent): void;
    private buildOrderByArray;
    setupDefaultColumns(preset?: string): void;
    onPreviewFile(node: NodeEntry): void;
    onNodeClick(nodeEntry: NodeEntry): void;
    onNodeDblClick(nodeEntry: NodeEntry): void;
    executeActionClick(nodeEntry: NodeEntry): void;
    onNodeSelect(event: {
        row: ShareDataRow;
        selection: Array<ShareDataRow>;
    }): void;
    onNodeUnselect(event: {
        row: ShareDataRow;
        selection: Array<ShareDataRow>;
    }): void;
    onShowRowContextMenu(event: DataCellEvent): void;
    onShowRowActionsMenu(event: DataCellEvent): void;
    onExecuteRowAction(event: DataRowActionEvent): void;
    private enforceSingleClickNavigationForMobile;
    canNavigateFolder(node: Node): boolean;
    private loadLayoutPresets;
    private onDataReady;
    updatePagination(requestPaginationModel: RequestPaginationModel): void;
    private syncPagination;
    onFilterSelectionChange(activeFilters: FilterSearch[]): void;
    resetNewFolderPagination(): void;
    ngOnDestroy(): void;
    private handleError;
    getPreselectedNodesBasedOnSelectionMode(): NodeEntry[];
    getPreselectedRowsBasedOnSelectionMode(): DataRow[];
    getSelectionBasedOnSelectionMode(): DataRow[];
    onPreselectNodes(): void;
    preserveExistingSelection(): void;
    preselectRowsOfPreselectedNodes(): void;
    unselectRowFromNodeId(nodeId: string): void;
    isSingleSelectionMode(): boolean;
    isMultipleSelectionMode(): boolean;
    hasPreselectedNodes(): boolean;
    hasPreselectedRows(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DocumentListComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DocumentListComponent, "adf-document-list", never, { "display": "display"; "permissionsStyle": "permissionsStyle"; "locationFormat": "locationFormat"; "navigate": "navigate"; "showHeader": "showHeader"; "navigationMode": "navigationMode"; "thumbnails": "thumbnails"; "selectionMode": "selectionMode"; "multiselect": "multiselect"; "contentActions": "contentActions"; "contentActionsPosition": "contentActionsPosition"; "contextMenuActions": "contextMenuActions"; "emptyFolderImageUrl": "emptyFolderImageUrl"; "allowDropFiles": "allowDropFiles"; "sorting": "sorting"; "additionalSorting": "additionalSorting"; "sortingMode": "sortingMode"; "loading": "loading"; "_rowFilter": "_rowFilter"; "imageResolver": "imageResolver"; "stickyHeader": "stickyHeader"; "headerFilters": "headerFilters"; "currentFolderId": "currentFolderId"; "preselectNodes": "preselectNodes"; "node": "node"; "maxItems": "maxItems"; "rowFilter": "rowFilter"; "includeFields": "includeFields"; "where": "where"; "rowStyle": "rowStyle"; "rowStyleClass": "rowStyleClass"; "filterValue": "filterValue"; }, { "nodeClick": "nodeClick"; "nodeDblClick": "nodeDblClick"; "folderChange": "folderChange"; "preview": "preview"; "ready": "ready"; "error": "error"; "nodeSelected": "nodeSelected"; "filterSelection": "filterSelection"; }, ["columnList", "customLoadingContent", "customNoPermissionsTemplate", "customNoContentTemplate"], ["adf-custom-empty-content-template, empty-folder-content", "adf-custom-no-permission-template, no-permission-content", "adf-custom-loading-content-template"]>;
}

//# sourceMappingURL=document-list.component.d.ts.map