{"version":3,"file":"document-list.component.d.ts","sources":["document-list.component.d.ts"],"names":[],"mappingssourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AfterContentInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { ContentService, DataCellEvent, DataRowActionEvent, DataSorting, DataTableComponent, ShowHeaderMode, PaginatedComponent, AppConfigService, DataColumnListComponent, UserPreferencesService, PaginationModel, ThumbnailService, CustomLoadingContentTemplateDirective, CustomNoPermissionTemplateDirective, CustomEmptyContentTemplateDirective, RequestPaginationModel, AlfrescoApiService, LockService, DataRow } from '@alfresco/adf-core';\nimport { Node, NodeEntry, NodePaging, NodesApi, Pagination } from '@alfresco/js-api';\nimport { Subject, BehaviorSubject } from 'rxjs';\nimport { ShareDataRow } from './../data/share-data-row.model';\nimport { ShareDataTableAdapter } from './../data/share-datatable-adapter';\nimport { ContentActionModel } from './../models/content-action.model';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { NodeEntityEvent, NodeEntryEvent } from './node.event';\nimport { NavigableComponentInterface } from '../../breadcrumb/navigable-component.interface';\nimport { FilterSearch } from './../../search/models/filter-search.interface';\nimport { RowFilter } from '../data/row-filter.model';\nimport { DocumentListService } from '../services/document-list.service';\nexport declare class DocumentListComponent implements OnInit, OnChanges, OnDestroy, AfterContentInit, PaginatedComponent, NavigableComponentInterface {\n    private documentListService;\n    private ngZone;\n    private elementRef;\n    private appConfig;\n    private userPreferencesService;\n    private contentService;\n    private thumbnailService;\n    private alfrescoApiService;\n    private lockService;\n    static SINGLE_CLICK_NAVIGATION: string;\n    static DOUBLE_CLICK_NAVIGATION: string;\n    DEFAULT_PAGINATION: Pagination;\n    DEFAULT_SORTING: DataSorting[];\n    columnList: DataColumnListComponent;\n    customLoadingContent: CustomLoadingContentTemplateDirective;\n    customNoPermissionsTemplate: CustomNoPermissionTemplateDirective;\n    customNoContentTemplate: CustomEmptyContentTemplateDirective;\n    includeFields: string[];\n    where: string;\n    display: string;\n    permissionsStyle: PermissionStyleModel[];\n    locationFormat: string;\n    navigate: boolean;\n    showHeader: ShowHeaderMode;\n    navigationMode: string;\n    thumbnails: boolean;\n    selectionMode: string;\n    multiselect: boolean;\n    contentActions: boolean;\n    contentActionsPosition: string;\n    contextMenuActions: boolean;\n    emptyFolderImageUrl: string;\n    allowDropFiles: boolean;\n    sorting: string[] | DataSorting;\n    additionalSorting: DataSorting;\n    sortingMode: 'server' | 'client';\n    rowStyle: {\n        [key: string]: any;\n    };\n    rowStyleClass: string;\n    loading: boolean;\n    _rowFilter: RowFilter | null;\n    set rowFilter(rowFilter: RowFilter);\n    get rowFilter(): RowFilter;\n    imageResolver: any | null;\n    stickyHeader: boolean;\n    headerFilters: boolean;\n    filterValue: any;\n    currentFolderId: string;\n    preselectNodes: NodeEntry[];\n    node: NodePaging;\n    maxItems: number;\n    nodeClick: EventEmitter<NodeEntityEvent>;\n    nodeDblClick: EventEmitter<NodeEntityEvent>;\n    folderChange: EventEmitter<NodeEntryEvent>;\n    preview: EventEmitter<NodeEntityEvent>;\n    ready: EventEmitter<NodePaging>;\n    error: EventEmitter<any>;\n    nodeSelected: EventEmitter<NodeEntry[]>;\n    filterSelection: EventEmitter<FilterSearch[]>;\n    dataTable: DataTableComponent;\n    actions: ContentActionModel[];\n    contextActionHandler: Subject<any>;\n    data: ShareDataTableAdapter;\n    noPermission: boolean;\n    selection: NodeEntry[];\n    $folderNode: Subject<Node>;\n    allowFiltering: boolean;\n    orderBy: string[];\n    preselectedRows: DataRow[];\n    folderNode: Node;\n    private _pagination;\n    pagination: BehaviorSubject<PaginationModel>;\n    sortingSubject: BehaviorSubject<DataSorting[]>;\n    private layoutPresets;\n    private rowMenuCache;\n    private loadingTimeout;\n    private onDestroy$;\n    _nodesApi: NodesApi;\n    get nodesApi(): NodesApi;\n    constructor(documentListService: DocumentListService, ngZone: NgZone, elementRef: ElementRef, appConfig: AppConfigService, userPreferencesService: UserPreferencesService, contentService: ContentService, thumbnailService: ThumbnailService, alfrescoApiService: AlfrescoApiService, lockService: LockService);\n    getContextActions(node: NodeEntry): {\n        model: ContentActionModel;\n        node: NodeEntry;\n        subject: Subject<any>;\n    }[];\n    get hasCustomLayout(): boolean;\n    private getDefaultSorting;\n    private getLayoutPreset;\n    isMobile(): boolean;\n    isEmpty(): boolean;\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    private setTableSchema;\n    ngOnChanges(changes: SimpleChanges): void;\n    reload(): void;\n    reloadWithoutResettingSelection(): void;\n    contextActionCallback(action: any): void;\n    getNodeActions(node: NodeEntry | any): ContentActionModel[];\n    private refreshAction;\n    private isActionVisible;\n    private isActionDisabled;\n    onShowContextMenu(e?: Event): void;\n    navigateTo(node: Node | string): boolean;\n    private getNodeFolderDestinationId;\n    private isLinkFolder;\n    updateCustomSourceData(nodeId: string): void;\n    executeContentAction(node: NodeEntry, action: ContentActionModel): void;\n    private setLoadingState;\n    loadFolder(): void;\n    resetSelection(): void;\n    onPageLoaded(nodePaging: NodePaging): void;\n    onSortingChanged(event: CustomEvent): void;\n    private buildOrderByArray;\n    setupDefaultColumns(preset?: string): void;\n    onPreviewFile(node: NodeEntry): void;\n    onNodeClick(nodeEntry: NodeEntry): void;\n    onNodeDblClick(nodeEntry: NodeEntry): void;\n    executeActionClick(nodeEntry: NodeEntry): void;\n    onNodeSelect(event: {\n        row: ShareDataRow;\n        selection: Array<ShareDataRow>;\n    }): void;\n    onNodeUnselect(event: {\n        row: ShareDataRow;\n        selection: Array<ShareDataRow>;\n    }): void;\n    onShowRowContextMenu(event: DataCellEvent): void;\n    onShowRowActionsMenu(event: DataCellEvent): void;\n    onExecuteRowAction(event: DataRowActionEvent): void;\n    private enforceSingleClickNavigationForMobile;\n    canNavigateFolder(node: Node): boolean;\n    private loadLayoutPresets;\n    private onDataReady;\n    updatePagination(requestPaginationModel: RequestPaginationModel): void;\n    private syncPagination;\n    onFilterSelectionChange(activeFilters: FilterSearch[]): void;\n    resetNewFolderPagination(): void;\n    ngOnDestroy(): void;\n    private handleError;\n    getPreselectedNodesBasedOnSelectionMode(): NodeEntry[];\n    getPreselectedRowsBasedOnSelectionMode(): DataRow[];\n    getSelectionBasedOnSelectionMode(): DataRow[];\n    onPreselectNodes(): void;\n    preserveExistingSelection(): void;\n    preselectRowsOfPreselectedNodes(): void;\n    unselectRowFromNodeId(nodeId: string): void;\n    isSingleSelectionMode(): boolean;\n    isMultipleSelectionMode(): boolean;\n    hasPreselectedNodes(): boolean;\n    hasPreselectedRows(): boolean;\n}\n"]}