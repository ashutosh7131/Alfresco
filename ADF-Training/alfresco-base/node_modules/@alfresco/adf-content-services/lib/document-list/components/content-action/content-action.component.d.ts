/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnInit, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';
import { ContentActionHandler } from '../../models/content-action.model';
import { DocumentActionsService } from '../../services/document-actions.service';
import { FolderActionsService } from '../../services/folder-actions.service';
import { ContentActionModel } from './../../models/content-action.model';
import { ContentActionListComponent } from './content-action-list.component';
import * as ɵngcc0 from '@angular/core';
export declare class ContentActionComponent implements OnInit, OnChanges, OnDestroy {
    private list;
    private documentActions;
    private folderActions;
    title: string;
    icon: string;
    visible: boolean | Function;
    handler: string;
    target: string;
    permission: string;
    disableWithNoPermission: boolean;
    disabled: boolean | Function;
    execute: EventEmitter<any>;
    permissionEvent: EventEmitter<any>;
    error: EventEmitter<any>;
    success: EventEmitter<any>;
    documentActionModel: ContentActionModel;
    folderActionModel: ContentActionModel;
    private subscriptions;
    constructor(list: ContentActionListComponent, documentActions: DocumentActionsService, folderActions: FolderActionsService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    register(model: ContentActionModel): boolean;
    unregister(model: ContentActionModel): boolean;
    private generateAction;
    getSystemHandler(target: string, name: string): ContentActionHandler;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ContentActionComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ContentActionComponent, "content-action", never, { "title": "title"; "visible": "visible"; "target": "target"; "disabled": "disabled"; "icon": "icon"; "handler": "handler"; "permission": "permission"; "disableWithNoPermission": "disableWithNoPermission"; }, { "execute": "execute"; "permissionEvent": "permissionEvent"; "error": "error"; "success": "success"; }, never, never>;
}

//# sourceMappingURL=content-action.component.d.ts.map