/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FileModel, FileInfo, UploadService, TranslationService, FileUploadErrorEvent } from '@alfresco/adf-core';
import { EventEmitter, OnInit, OnDestroy, NgZone } from '@angular/core';
import { Subject } from 'rxjs';
import { UploadFilesEvent } from '../upload-files.event';
import * as ɵngcc0 from '@angular/core';
export declare abstract class UploadBase implements OnInit, OnDestroy {
    protected uploadService: UploadService;
    protected translationService: TranslationService;
    protected ngZone: NgZone;
    maxFilesSize: number;
    rootFolderId: string;
    disabled: boolean;
    acceptedFilesType: string;
    versioning: boolean;
    majorVersion: boolean;
    comment: string;
    nodeType: string;
    success: EventEmitter<any>;
    error: EventEmitter<FileUploadErrorEvent>;
    beginUpload: EventEmitter<UploadFilesEvent>;
    updateFileVersion: EventEmitter<CustomEvent<any>>;
    protected onDestroy$: Subject<boolean>;
    constructor(uploadService: UploadService, translationService: TranslationService, ngZone: NgZone);
    ngOnInit(): void;
    ngOnDestroy(): void;
    uploadFiles(files: File[]): void;
    uploadFilesInfo(files: FileInfo[]): void;
    private uploadQueue;
    protected isFileAcceptable(file: FileModel): boolean;
    protected createFileModel(file: File, parentId: string, path: string, id?: string): FileModel;
    protected isFileSizeAllowed(file: FileModel): boolean;
    protected isMaxFileSizeDefined(): boolean;
    protected isFileSizeCorrect(file: FileModel): boolean;
    private isFileSizeAcceptable;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UploadBase, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<UploadBase, never, never, { "rootFolderId": "rootFolderId"; "disabled": "disabled"; "acceptedFilesType": "acceptedFilesType"; "versioning": "versioning"; "majorVersion": "majorVersion"; "nodeType": "nodeType"; "maxFilesSize": "maxFilesSize"; "comment": "comment"; }, { "success": "success"; "error": "error"; "beginUpload": "beginUpload"; "updateFileVersion": "updateFileVersion"; }, never>;
}

//# sourceMappingURL=upload-base.d.ts.map