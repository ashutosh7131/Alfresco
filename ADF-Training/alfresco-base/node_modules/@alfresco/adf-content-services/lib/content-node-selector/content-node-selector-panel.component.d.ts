/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnInit, OnDestroy } from '@angular/core';
import { HighlightDirective, UserPreferencesService, InfinitePaginationComponent, PaginatedComponent, NodesApiService, SitesService, UploadService, AppConfigService, DataSorting, ShowHeaderMode } from '@alfresco/adf-core';
import { FormControl } from '@angular/forms';
import { Node, NodePaging, Pagination, SiteEntry, SitePaging, NodeEntry, QueryBody } from '@alfresco/js-api';
import { DocumentListComponent } from '../document-list/components/document-list.component';
import { RowFilter } from '../document-list/data/row-filter.model';
import { ImageResolver } from '../document-list/data/image-resolver.model';
import { CustomResourcesService } from '../document-list/services/custom-resources.service';
import { NodeEntryEvent } from '../document-list';
import { SearchQueryBuilderService } from '../search/services/search-query-builder.service';
import { ContentNodeSelectorPanelService } from './content-node-selector-panel.service';
import * as ɵngcc0 from '@angular/core';
export declare type ValidationFunction = (entry: Node) => boolean;
export declare const defaultValidation: () => boolean;
export declare class ContentNodeSelectorPanelComponent implements OnInit, OnDestroy {
    private customResourcesService;
    queryBuilderService: SearchQueryBuilderService;
    private userPreferencesService;
    private nodesApiService;
    private uploadService;
    private sitesService;
    private appConfigService;
    private contentNodeSelectorPanelService;
    DEFAULT_PAGINATION: Pagination;
    private showSiteList;
    private showSearchField;
    private showCounter;
    restrictRootToCurrentFolderId: boolean;
    currentFolderId: string;
    dropdownHideMyFiles: boolean;
    dropdownSiteList: SitePaging;
    _rowFilter: RowFilter;
    where: string;
    set rowFilter(rowFilter: RowFilter);
    get rowFilter(): RowFilter;
    _excludeSiteContent: string[];
    set excludeSiteContent(excludeSiteContent: string[]);
    get excludeSiteContent(): string[];
    imageResolver: ImageResolver;
    pageSize: number;
    selectionMode: 'single' | 'multiple';
    isSelectionValid: ValidationFunction;
    breadcrumbTransform: (node: any) => any;
    set showSearch(value: boolean);
    get showSearch(): boolean;
    set showDropdownSiteList(value: boolean);
    get showDropdownSiteList(): boolean;
    set showFilesInResult(value: boolean);
    set showNodeCounter(value: boolean);
    get showNodeCounter(): boolean;
    select: EventEmitter<Node[]>;
    navigationChange: EventEmitter<NodeEntryEvent>;
    siteChange: EventEmitter<string>;
    showingSearch: EventEmitter<boolean>;
    currentFolder: EventEmitter<Node>;
    folderLoaded: EventEmitter<any>;
    documentList: DocumentListComponent;
    highlighter: HighlightDirective;
    nodePaging: NodePaging | null;
    siteId: null | string;
    breadcrumbRootId: null | string;
    searchTerm: string;
    showingSearchResults: boolean;
    loadingSearchResults: boolean;
    inDialog: boolean;
    _chosenNode: Node[];
    selectionWithoutValidation: Node[];
    folderIdToShow: string | null;
    breadcrumbFolderTitle: string | null;
    startSiteGuid: string | null;
    hasValidQuery: boolean;
    showHeader: ShowHeaderMode;
    infinitePaginationComponent: InfinitePaginationComponent;
    infiniteScroll: boolean;
    debounceSearch: number;
    searchInput: FormControl;
    target: PaginatedComponent;
    preselectedNodes: NodeEntry[];
    currentUploadBatch: NodeEntry[];
    sorting: string[] | DataSorting;
    searchPanelExpanded: boolean;
    private onDestroy$;
    constructor(customResourcesService: CustomResourcesService, queryBuilderService: SearchQueryBuilderService, userPreferencesService: UserPreferencesService, nodesApiService: NodesApiService, uploadService: UploadService, sitesService: SitesService, appConfigService: AppConfigService, contentNodeSelectorPanelService: ContentNodeSelectorPanelService);
    set chosenNode(value: Node[]);
    get chosenNode(): Node[];
    getSelectedCount(): number;
    ngOnInit(): void;
    ngOnDestroy(): void;
    toggleSearchPanel(): void;
    hasCustomModels(): boolean;
    private onFileUploadEvent;
    private onFileUploadDeletedEvent;
    private getStartSite;
    private createRowFilter;
    private isExcludedSiteContent;
    siteChanged(chosenSite: SiteEntry): void;
    get breadcrumbFolderNode(): Node | null;
    prepareDialogForNewSearch(queryBody: QueryBody): void;
    clear(): void;
    resetFolderToShow(): void;
    clearSearch(): void;
    private addCorrespondingNodeIdsQuery;
    private setSearchScopeToNodes;
    private showSearchResults;
    onFolderChange($event: NodeEntryEvent): void;
    onFolderLoaded(nodePaging: NodePaging): void;
    updatePaginationAfterRowFilter(nodePaging: NodePaging): void;
    showBreadcrumbs(): true | Node[];
    getNextPageOfSearch(pagination: Pagination): void;
    private attemptNodeSelection;
    resetChosenNode(): void;
    onCurrentSelection(nodesEntries: NodeEntry[]): void;
    setTitleIfCustomSite(site: SiteEntry): void;
    hasPreselectNodes(): boolean;
    isSingleSelectionMode(): boolean;
    getPreselectNodesBasedOnSelectionMode(): NodeEntry[];
    private resetPagination;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ContentNodeSelectorPanelComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ContentNodeSelectorPanelComponent, "adf-content-node-selector-panel", never, { "restrictRootToCurrentFolderId": "restrictRootToCurrentFolderId"; "currentFolderId": "currentFolderId"; "dropdownHideMyFiles": "dropdownHideMyFiles"; "dropdownSiteList": "dropdownSiteList"; "imageResolver": "imageResolver"; "pageSize": "pageSize"; "selectionMode": "selectionMode"; "isSelectionValid": "isSelectionValid"; "rowFilter": "rowFilter"; "excludeSiteContent": "excludeSiteContent"; "showSearch": "showSearch"; "showDropdownSiteList": "showDropdownSiteList"; "showFilesInResult": "showFilesInResult"; "showNodeCounter": "showNodeCounter"; "breadcrumbTransform": "breadcrumbTransform"; "where": "where"; }, { "select": "select"; "navigationChange": "navigationChange"; "siteChange": "siteChange"; "showingSearch": "showingSearch"; "currentFolder": "currentFolder"; "folderLoaded": "folderLoaded"; }, never, never>;
}

//# sourceMappingURL=content-node-selector-panel.component.d.ts.map