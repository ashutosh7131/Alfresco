/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MatDialog } from '@angular/material/dialog';
import { EventEmitter } from '@angular/core';
import { ContentService, ThumbnailService, SitesService, TranslationService } from '@alfresco/adf-core';
import { Subject, Observable } from 'rxjs';
import { Node } from '@alfresco/js-api';
import { DocumentListService } from '../document-list/services/document-list.service';
import { NodeAction } from '../document-list/models/node-action.enum';
import * as ɵngcc0 from '@angular/core';
export declare class ContentNodeDialogService {
    private dialog;
    private contentService;
    private documentListService;
    private siteService;
    private translation;
    private thumbnailService;
    static nonDocumentSiteContent: string[];
    error: EventEmitter<any>;
    constructor(dialog: MatDialog, contentService: ContentService, documentListService: DocumentListService, siteService: SitesService, translation: TranslationService, thumbnailService: ThumbnailService);
    openFileBrowseDialogByFolderId(folderNodeId: string): Observable<Node[]>;
    openLockNodeDialog(contentEntry: Node): Subject<string>;
    openFileBrowseDialogBySite(): Observable<Node[]>;
    openFileBrowseDialogByDefaultLocation(): Observable<Node[]>;
    openFolderBrowseDialogBySite(): Observable<Node[]>;
    openFolderBrowseDialogByFolderId(folderNodeId: string): Observable<Node[]>;
    openCopyMoveDialog(action: NodeAction, contentEntry: Node, permission?: string, excludeSiteContent?: string[]): Observable<Node[]>;
    getTitleTranslation(action: string, name: string): string;
    openUploadFolderDialog(action: NodeAction, contentEntry: Node): Observable<Node[]>;
    openUploadFileDialog(action: NodeAction, contentEntry: Node, showFilesInResult?: boolean): Observable<Node[]>;
    private openContentNodeDialog;
    private imageResolver;
    private hasAllowableOperationsOnNodeFolder;
    private isNodeFolder;
    private isCopyMoveSelectionValid;
    private hasEntityCreatePermission;
    private isSite;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ContentNodeDialogService, never>;
}

//# sourceMappingURL=content-node-dialog.service.d.ts.map