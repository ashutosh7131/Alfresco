/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnInit } from '@angular/core';
import { MatDialogRef } from '@angular/material/dialog';
import { TranslationService, NotificationService, ContentService, UploadService } from '@alfresco/adf-core';
import { Node } from '@alfresco/js-api';
import { ContentNodeSelectorComponentData } from './content-node-selector.component-data.interface';
import { NodeEntryEvent } from '../document-list/components/node.event';
import { NodeAction } from '../document-list/models/node-action.enum';
export declare class ContentNodeSelectorComponent implements OnInit {
    private translation;
    private contentService;
    private notificationService;
    private uploadService;
    private dialog;
    data: ContentNodeSelectorComponentData;
    title: string;
    action: NodeAction;
    buttonActionName: string;
    chosenNode: Node[];
    currentDirectoryId: string;
    showingSearch: boolean;
    hasAllowableOperations: boolean;
    isLoading: boolean;
    selectedTabIndex: number;
    uploadStarted: boolean;
    emptyFolderImageUrl: string;
    breadcrumbFolderNode: Node;
    constructor(translation: TranslationService, contentService: ContentService, notificationService: NotificationService, uploadService: UploadService, dialog: MatDialogRef<ContentNodeSelectorComponent>, data: ContentNodeSelectorComponentData);
    ngOnInit(): void;
    close(): void;
    onSelect(nodeList: Node[]): void;
    onSiteChange(siteTitle: string): void;
    onNavigationChange(pathElement: NodeEntryEvent): void;
    onClick(): void;
    updateTitle(siteTitle: string): void;
    getTitleTranslation(action: NodeAction, name: string): string;
    getSelectedCount(): number;
    isCounterVisible(): boolean;
    isMultipleSelection(): boolean;
    onError(error: any): void;
    isChooseButtonDisabled(): boolean;
    hasNodeSelected(): boolean;
    onShowingSearch(value: boolean): void;
    onCurrentFolder(currentFolder: Node): void;
    isNotAllowedToUpload(): boolean;
    onFolderLoaded(): void;
    onTabSelectionChange(tabIndex: number): void;
    isFileServerTabSelected(): boolean;
    isLocalUploadTabSelected(): boolean;
    isUploadEnabled(): boolean;
    canPerformLocalUpload(): boolean;
    getWarningMessage(): string;
    hasNoPermissionToUpload(): boolean;
    hasUploadError(): boolean;
}
