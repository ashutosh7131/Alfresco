{"version":3,"file":"content-node-selector-panel.component.d.ts","sources":["content-node-selector-panel.component.d.ts"],"names":[],"mappingssourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter, OnInit, OnDestroy } from '@angular/core';\nimport { HighlightDirective, UserPreferencesService, InfinitePaginationComponent, PaginatedComponent, NodesApiService, SitesService, UploadService, AppConfigService, DataSorting, ShowHeaderMode } from '@alfresco/adf-core';\nimport { FormControl } from '@angular/forms';\nimport { Node, NodePaging, Pagination, SiteEntry, SitePaging, NodeEntry, QueryBody } from '@alfresco/js-api';\nimport { DocumentListComponent } from '../document-list/components/document-list.component';\nimport { RowFilter } from '../document-list/data/row-filter.model';\nimport { ImageResolver } from '../document-list/data/image-resolver.model';\nimport { CustomResourcesService } from '../document-list/services/custom-resources.service';\nimport { NodeEntryEvent } from '../document-list';\nimport { SearchQueryBuilderService } from '../search/services/search-query-builder.service';\nimport { ContentNodeSelectorPanelService } from './content-node-selector-panel.service';\nexport declare type ValidationFunction = (entry: Node) => boolean;\nexport declare const defaultValidation: () => boolean;\nexport declare class ContentNodeSelectorPanelComponent implements OnInit, OnDestroy {\n    private customResourcesService;\n    queryBuilderService: SearchQueryBuilderService;\n    private userPreferencesService;\n    private nodesApiService;\n    private uploadService;\n    private sitesService;\n    private appConfigService;\n    private contentNodeSelectorPanelService;\n    DEFAULT_PAGINATION: Pagination;\n    private showSiteList;\n    private showSearchField;\n    private showCounter;\n    restrictRootToCurrentFolderId: boolean;\n    currentFolderId: string;\n    dropdownHideMyFiles: boolean;\n    dropdownSiteList: SitePaging;\n    _rowFilter: RowFilter;\n    where: string;\n    set rowFilter(rowFilter: RowFilter);\n    get rowFilter(): RowFilter;\n    _excludeSiteContent: string[];\n    set excludeSiteContent(excludeSiteContent: string[]);\n    get excludeSiteContent(): string[];\n    imageResolver: ImageResolver;\n    pageSize: number;\n    selectionMode: 'single' | 'multiple';\n    isSelectionValid: ValidationFunction;\n    breadcrumbTransform: (node: any) => any;\n    set showSearch(value: boolean);\n    get showSearch(): boolean;\n    set showDropdownSiteList(value: boolean);\n    get showDropdownSiteList(): boolean;\n    set showFilesInResult(value: boolean);\n    set showNodeCounter(value: boolean);\n    get showNodeCounter(): boolean;\n    select: EventEmitter<Node[]>;\n    navigationChange: EventEmitter<NodeEntryEvent>;\n    siteChange: EventEmitter<string>;\n    showingSearch: EventEmitter<boolean>;\n    currentFolder: EventEmitter<Node>;\n    folderLoaded: EventEmitter<any>;\n    documentList: DocumentListComponent;\n    highlighter: HighlightDirective;\n    nodePaging: NodePaging | null;\n    siteId: null | string;\n    breadcrumbRootId: null | string;\n    searchTerm: string;\n    showingSearchResults: boolean;\n    loadingSearchResults: boolean;\n    inDialog: boolean;\n    _chosenNode: Node[];\n    selectionWithoutValidation: Node[];\n    folderIdToShow: string | null;\n    breadcrumbFolderTitle: string | null;\n    startSiteGuid: string | null;\n    hasValidQuery: boolean;\n    showHeader: ShowHeaderMode;\n    infinitePaginationComponent: InfinitePaginationComponent;\n    infiniteScroll: boolean;\n    debounceSearch: number;\n    searchInput: FormControl;\n    target: PaginatedComponent;\n    preselectedNodes: NodeEntry[];\n    currentUploadBatch: NodeEntry[];\n    sorting: string[] | DataSorting;\n    searchPanelExpanded: boolean;\n    private onDestroy$;\n    constructor(customResourcesService: CustomResourcesService, queryBuilderService: SearchQueryBuilderService, userPreferencesService: UserPreferencesService, nodesApiService: NodesApiService, uploadService: UploadService, sitesService: SitesService, appConfigService: AppConfigService, contentNodeSelectorPanelService: ContentNodeSelectorPanelService);\n    set chosenNode(value: Node[]);\n    get chosenNode(): Node[];\n    getSelectedCount(): number;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    toggleSearchPanel(): void;\n    hasCustomModels(): boolean;\n    private onFileUploadEvent;\n    private onFileUploadDeletedEvent;\n    private getStartSite;\n    private createRowFilter;\n    private isExcludedSiteContent;\n    siteChanged(chosenSite: SiteEntry): void;\n    get breadcrumbFolderNode(): Node | null;\n    prepareDialogForNewSearch(queryBody: QueryBody): void;\n    clear(): void;\n    resetFolderToShow(): void;\n    clearSearch(): void;\n    private addCorrespondingNodeIdsQuery;\n    private setSearchScopeToNodes;\n    private showSearchResults;\n    onFolderChange($event: NodeEntryEvent): void;\n    onFolderLoaded(nodePaging: NodePaging): void;\n    updatePaginationAfterRowFilter(nodePaging: NodePaging): void;\n    showBreadcrumbs(): true | Node[];\n    getNextPageOfSearch(pagination: Pagination): void;\n    private attemptNodeSelection;\n    resetChosenNode(): void;\n    onCurrentSelection(nodesEntries: NodeEntry[]): void;\n    setTitleIfCustomSite(site: SiteEntry): void;\n    hasPreselectNodes(): boolean;\n    isSingleSelectionMode(): boolean;\n    getPreselectNodesBasedOnSelectionMode(): NodeEntry[];\n    private resetPagination;\n}\n"]}