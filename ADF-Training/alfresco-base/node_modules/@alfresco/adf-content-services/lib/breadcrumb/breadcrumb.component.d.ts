/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnChanges, OnInit, OnDestroy } from '@angular/core';
import { MatSelect } from '@angular/material/select';
import { Node, PathElementEntity } from '@alfresco/js-api';
import { DocumentListComponent } from '../document-list';
import * as ɵngcc0 from '@angular/core';
export declare class BreadcrumbComponent implements OnInit, OnChanges, OnDestroy {
    folderNode: Node;
    root: string;
    rootId: string;
    target: DocumentListComponent;
    transform: (node: any) => any;
    dropdown: MatSelect;
    maxItems: number;
    previousNodes: PathElementEntity[];
    lastNodes: PathElementEntity[];
    route: PathElementEntity[];
    private onDestroy$;
    get hasRoot(): boolean;
    readOnly: boolean;
    navigate: EventEmitter<PathElementEntity>;
    ngOnInit(): void;
    ngOnChanges(): void;
    protected recalculateNodes(): void;
    open(): void;
    hasPreviousNodes(): boolean;
    parseRoute(node: Node): PathElementEntity[];
    private getElementPosition;
    breadcrumbItemIsAnchor(lastItem: any): boolean;
    onRoutePathClick(route: PathElementEntity, event?: Event): void;
    onRouteClick(route: PathElementEntity): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BreadcrumbComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BreadcrumbComponent, "adf-breadcrumb", never, { "folderNode": "folderNode"; "root": "root"; "rootId": "rootId"; "readOnly": "readOnly"; "transform": "transform"; "target": "target"; "maxItems": "maxItems"; }, { "navigate": "navigate"; }, never, never>;
}

//# sourceMappingURL=breadcrumb.component.d.ts.map