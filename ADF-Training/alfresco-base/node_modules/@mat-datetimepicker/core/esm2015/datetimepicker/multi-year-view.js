/**
 * @fileoverview added by tsickle
 * Generated from: datetimepicker/multi-year-view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* tslint:disable */
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Optional, Output, ViewEncapsulation } from "@angular/core";
import { createMissingDateImplError } from "./datetimepicker-errors";
import { MatDatetimepickerCalendarCell } from "./calendar-body";
import { slideCalendar } from "./datetimepicker-animations";
import { MAT_DATETIME_FORMATS } from "../adapter/datetime-formats";
import { DatetimeAdapter } from "../adapter/datetime-adapter";
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../adapter/datetime-adapter';
import * as ɵngcc2 from './calendar-body';
export const yearsPerPage = 24;
/** @type {?} */
export const yearsPerRow = 4;
/**
 * An internal component used to display multiple years in the datepicker.
 * \@docs-private
 * @template D
 */
export class MatDatetimepickerMultiYearView {
    /**
     * @param {?} _adapter
     * @param {?} _dateFormats
     */
    constructor(_adapter, _dateFormats) {
        this._adapter = _adapter;
        this._dateFormats = _dateFormats;
        this._userSelection = new EventEmitter();
        this.type = "date";
        /**
         * Emits when a new month is selected.
         */
        this.selectedChange = new EventEmitter();
        if (!this._adapter) {
            throw createMissingDateImplError("DatetimeAdapter");
        }
        if (!this._dateFormats) {
            throw createMissingDateImplError("MAT_DATETIME_FORMATS");
        }
        this._activeDate = this._adapter.today();
    }
    /**
     * The date to display in this multi year view
     * @return {?}
     */
    get activeDate() {
        return this._activeDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set activeDate(value) {
        /** @type {?} */
        let oldActiveDate = this._activeDate;
        this._activeDate = value || this._adapter.today();
        if (oldActiveDate && this._activeDate &&
            !isSameMultiYearView(this._adapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {
            this._init();
        }
    }
    /**
     * The currently selected date.
     * @return {?}
     */
    get selected() {
        return this._selected;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selected(value) {
        this._selected = value;
        this._selectedYear = this._selected && this._adapter.getYear(this._selected);
    }
    /**
     * The minimum selectable date.
     * @return {?}
     */
    get minDate() {
        return this._minDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set minDate(value) {
        this._minDate = this._getValidDateOrNull(this._adapter.deserialize(value));
    }
    /**
     * The maximum selectable date.
     * @return {?}
     */
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set maxDate(value) {
        this._maxDate = this._getValidDateOrNull(this._adapter.deserialize(value));
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._init();
    }
    /**
     * Handles when a new year is selected.
     * @param {?} year
     * @return {?}
     */
    _yearSelected(year) {
        /** @type {?} */
        const month = this._adapter.getMonth(this.activeDate);
        /** @type {?} */
        const normalizedDate = this._adapter.createDatetime(year, month, 1, 0, 0);
        this.selectedChange.emit(this._adapter.createDatetime(year, month, Math.min(this._adapter.getDate(this.activeDate), this._adapter.getNumDaysInMonth(normalizedDate)), this._adapter.getHour(this.activeDate), this._adapter.getMinute(this.activeDate)));
        if (this.type === "year") {
            this._userSelection.emit();
        }
    }
    /**
     * @return {?}
     */
    _getActiveCell() {
        return getActiveOffset(this._adapter, this.activeDate, this.minDate, this.maxDate);
    }
    /**
     * @return {?}
     */
    _calendarStateDone() {
        this._calendarState = "";
    }
    /**
     * Initializes this year view.
     * @private
     * @return {?}
     */
    _init() {
        this._todayYear = this._adapter.getYear(this._adapter.today());
        this._yearLabel = this._adapter.getYearName(this.activeDate);
        /** @type {?} */
        const activeYear = this._adapter.getYear(this.activeDate);
        /** @type {?} */
        const minYearOfPage = activeYear - getActiveOffset(this._adapter, this.activeDate, this.minDate, this.maxDate);
        this._years = [];
        for (let i = 0, row = []; i < yearsPerPage; i++) {
            row.push(minYearOfPage + i);
            if (row.length == yearsPerRow) {
                this._years.push(row.map((/**
                 * @param {?} year
                 * @return {?}
                 */
                year => this._createCellForYear(year))));
                row = [];
            }
        }
    }
    /**
     * Creates an MatDatetimepickerCalendarCell for the given year.
     * @private
     * @param {?} year
     * @return {?}
     */
    _createCellForYear(year) {
        /** @type {?} */
        let yearName = this._adapter.getYearName(this._adapter.createDate(year, 0, 1));
        return new MatDatetimepickerCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));
    }
    /**
     * Whether the given year is enabled.
     * @private
     * @param {?} year
     * @return {?}
     */
    _shouldEnableYear(year) {
        // disable if the year is greater than maxDate lower than minDate
        if (year === undefined || year === null ||
            (this.maxDate && year > this._adapter.getYear(this.maxDate)) ||
            (this.minDate && year < this._adapter.getYear(this.minDate))) {
            return false;
        }
        // enable if it reaches here and there's no filter defined
        if (!this.dateFilter) {
            return true;
        }
        /** @type {?} */
        const firstOfYear = this._adapter.createDate(year, 0, 1);
        // If any date in the year is enabled count the year as enabled.
        for (let date = firstOfYear; this._adapter.getYear(date) == year; date = this._adapter.addCalendarDays(date, 1)) {
            if (this.dateFilter(date)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Gets the year in this years range that the given Date falls on.
     * Returns null if the given Date is not in this range.
     * @private
     * @param {?} date
     * @return {?}
     */
    _getYearInCurrentRange(date) {
        /** @type {?} */
        const year = this._adapter.getYear(date);
        return this._isInRange(year) ?
            year : null;
    }
    /**
     * Validate if the current year is in the current range
     * Returns true if is in range else returns false
     * @private
     * @param {?} year
     * @return {?}
     */
    _isInRange(year) {
        return true;
    }
    /**
     * @private
     * @param {?} obj The object to check.
     * @return {?} The given object if it is both a date instance and valid, otherwise null.
     */
    _getValidDateOrNull(obj) {
        return (this._adapter.isDateInstance(obj) && this._adapter.isValid(obj)) ? obj : null;
    }
}
MatDatetimepickerMultiYearView.ɵfac = function MatDatetimepickerMultiYearView_Factory(t) { return new (t || MatDatetimepickerMultiYearView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DatetimeAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATETIME_FORMATS, 8)); };
MatDatetimepickerMultiYearView.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDatetimepickerMultiYearView, selectors: [["mat-datetimepicker-multi-year-view"]], inputs: { type: "type", activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter" }, outputs: { _userSelection: "_userSelection", selectedChange: "selectedChange" }, decls: 3, vars: 6, consts: [[1, "mat-datetimepicker-calendar-table"], [1, "mat-datetimepicker-calendar-table-header"], ["allowDisabledSelection", "true", "mat-datetimepicker-calendar-body", "", "role", "grid", 3, "activeCell", "numCols", "rows", "selectedValue", "todayValue", "selectedValueChange"]], template: function MatDatetimepickerMultiYearView_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "table", 0);
        ɵngcc0.ɵɵelement(1, "thead", 1);
        ɵngcc0.ɵɵelementStart(2, "tbody", 2);
        ɵngcc0.ɵɵlistener("@slideCalendar.done", function MatDatetimepickerMultiYearView_Template_tbody_animation_slideCalendar_done_2_listener() { return ctx._calendarStateDone(); })("selectedValueChange", function MatDatetimepickerMultiYearView_Template_tbody_selectedValueChange_2_listener($event) { return ctx._yearSelected($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("@slideCalendar", ctx._calendarState)("activeCell", ctx._getActiveCell())("numCols", 4)("rows", ctx._years)("selectedValue", ctx._selectedYear)("todayValue", ctx._todayYear);
    } }, directives: [ɵngcc2.MatDatetimepickerCalendarBody], encapsulation: 2, data: { animation: [slideCalendar] }, changeDetection: 0 });
/** @nocollapse */
MatDatetimepickerMultiYearView.ctorParameters = () => [
    { type: DatetimeAdapter, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATETIME_FORMATS,] }] }
];
MatDatetimepickerMultiYearView.propDecorators = {
    _userSelection: [{ type: Output }],
    type: [{ type: Input }],
    dateFilter: [{ type: Input }],
    selectedChange: [{ type: Output }],
    activeDate: [{ type: Input }],
    selected: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDatetimepickerMultiYearView, [{
        type: Component,
        args: [{
                selector: "mat-datetimepicker-multi-year-view",
                template: "<table class=\"mat-datetimepicker-calendar-table\">\r\n  <thead class=\"mat-datetimepicker-calendar-table-header\"></thead>\r\n  <tbody (@slideCalendar.done)=\"_calendarStateDone()\"\r\n         (selectedValueChange)=\"_yearSelected($event)\"\r\n         [@slideCalendar]=\"_calendarState\"\r\n         [activeCell]=\"_getActiveCell()\"\r\n         [numCols]=\"4\"\r\n         [rows]=\"_years\"\r\n         [selectedValue]=\"_selectedYear\"\r\n         [todayValue]=\"_todayYear\"\r\n         allowDisabledSelection=\"true\"\r\n         mat-datetimepicker-calendar-body\r\n         role=\"grid\"></tbody>\r\n</table>\r\n",
                animations: [slideCalendar],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc1.DatetimeAdapter, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MAT_DATETIME_FORMATS]
            }] }]; }, { _userSelection: [{
            type: Output
        }], type: [{
            type: Input
        }], selectedChange: [{
            type: Output
        }], activeDate: [{
            type: Input
        }], selected: [{
            type: Input
        }], minDate: [{
            type: Input
        }], maxDate: [{
            type: Input
        }], dateFilter: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    MatDatetimepickerMultiYearView.prototype._userSelection;
    /** @type {?} */
    MatDatetimepickerMultiYearView.prototype.type;
    /**
     * A function used to filter which dates are selectable.
     * @type {?}
     */
    MatDatetimepickerMultiYearView.prototype.dateFilter;
    /**
     * Emits when a new month is selected.
     * @type {?}
     */
    MatDatetimepickerMultiYearView.prototype.selectedChange;
    /**
     * Grid of calendar cells representing the years in the range.
     * @type {?}
     */
    MatDatetimepickerMultiYearView.prototype._years;
    /**
     * The label for this year range (e.g. "2000-2020").
     * @type {?}
     */
    MatDatetimepickerMultiYearView.prototype._yearLabel;
    /**
     * The year in this range that today falls on. Null if today is in a different range.
     * @type {?}
     */
    MatDatetimepickerMultiYearView.prototype._todayYear;
    /**
     * The year in this range that the selected Date falls on.
     * Null if the selected Date is in a different range.
     * @type {?}
     */
    MatDatetimepickerMultiYearView.prototype._selectedYear;
    /** @type {?} */
    MatDatetimepickerMultiYearView.prototype._calendarState;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMultiYearView.prototype._activeDate;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMultiYearView.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMultiYearView.prototype._minDate;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMultiYearView.prototype._maxDate;
    /** @type {?} */
    MatDatetimepickerMultiYearView.prototype._adapter;
    /**
     * @type {?}
     * @private
     */
    MatDatetimepickerMultiYearView.prototype._dateFormats;
}
/**
 * @template D
 * @param {?} dateAdapter
 * @param {?} date1
 * @param {?} date2
 * @param {?} minDate
 * @param {?} maxDate
 * @return {?}
 */
export function isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {
    /** @type {?} */
    const year1 = dateAdapter.getYear(date1);
    /** @type {?} */
    const year2 = dateAdapter.getYear(date2);
    /** @type {?} */
    const startingYear = getStartingYear(dateAdapter, minDate, maxDate);
    return Math.floor((year1 - startingYear) / yearsPerPage) ===
        Math.floor((year2 - startingYear) / yearsPerPage);
}
/**
 * When the multi-year view is first opened, the active year will be in view.
 * So we compute how many years are between the active year and the *slot* where our
 * "startingYear" will render when paged into view.
 * @template D
 * @param {?} dateAdapter
 * @param {?} activeDate
 * @param {?} minDate
 * @param {?} maxDate
 * @return {?}
 */
export function getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {
    /** @type {?} */
    const activeYear = dateAdapter.getYear(activeDate);
    return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)), yearsPerPage);
}
/**
 * We pick a "starting" year such that either the maximum year would be at the end
 * or the minimum year would be at the beginning of a page.
 * @template D
 * @param {?} dateAdapter
 * @param {?} minDate
 * @param {?} maxDate
 * @return {?}
 */
function getStartingYear(dateAdapter, minDate, maxDate) {
    /** @type {?} */
    let startingYear = 0;
    if (maxDate) {
        /** @type {?} */
        const maxYear = dateAdapter.getYear(maxDate);
        startingYear = maxYear - yearsPerPage + 1;
    }
    else if (minDate) {
        startingYear = dateAdapter.getYear(minDate);
    }
    return startingYear;
}
/**
 * Gets remainder that is non-negative, even if first number is negative
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function euclideanModulo(a, b) {
    return (a % b + b) % b;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,