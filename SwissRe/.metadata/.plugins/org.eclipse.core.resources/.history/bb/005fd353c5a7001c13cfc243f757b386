package com.swissre.alfrm.webscripts;

import org.alfresco.service.ServiceRegistry;
import org.alfresco.service.cmr.repository.NodeRef;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.extensions.webscripts.Cache;
import org.springframework.extensions.webscripts.DeclarativeWebScript;
import org.springframework.extensions.webscripts.Status;
import org.springframework.extensions.webscripts.WebScriptRequest;
import com.azure.messaging.servicebus.ServiceBusClientBuilder;
import com.azure.messaging.servicebus.ServiceBusMessage;
import com.azure.messaging.servicebus.ServiceBusReceivedMessageContext;
import com.azure.messaging.servicebus.ServiceBusSenderClient;
import com.swissre.alfrm.message.MessageService;
import com.swissre.alfrm.model.SwissReModel;

import java.util.*;

public class BoxnumberUpdateWebscript extends DeclarativeWebScript {
	private static String connectionString;
	private static String queueName;
	private static JSONArray dataObj;
	private static JSONObject obj;
	private static Log logger = LogFactory.getLog(BoxnumberUpdateWebscript.class);
	private static NodeRef nodeRef;
	private NodeRef recNodeRef1;
	private List<String> newNodeRef;
	private List<NodeRef> recNodeRefList = new ArrayList<NodeRef>();
	private ServiceRegistry serviceRegistry;

	@Override
	protected Map<String, Object> executeImpl(WebScriptRequest req, Status status, Cache cache) {
		Map<String, Object> model = new HashMap<>();

		Object content = req.parseContent();
		if (!(content instanceof JSONArray)) {
			status.setCode(Status.STATUS_BAD_REQUEST);
			status.setRedirect(true);
			return model;
		}

		try {
			dataObj = (JSONArray) content;
			for (int i = 0; i < dataObj.length(); i++) {
				obj = (JSONObject) dataObj.get(i);
				System.out.println("Object is: " + obj);
				nodeRef = new NodeRef((String) obj.get("nodeRef"));
				//System.out.println("Selected Node/Nodes : " + nodeRef);
				ServiceBusMessage messages = new ServiceBusMessage(nodeRef.toString());
				messages.setContentType("application/json");
				messages.setMessageId(nodeRef.getId());
				//System.out.println("MessageID: " + messages.getMessageId());
				ServiceBusSenderClient senderClient = new ServiceBusClientBuilder()
						.connectionString(BoxnumberUpdateWebscript.getConnectionString()).sender()
						.queueName(BoxnumberUpdateWebscript.getQueueName()).buildClient();
				senderClient.sendMessage(messages);
				senderClient.close();
			}

		} catch (Exception e) {
			status.setCode(Status.STATUS_INTERNAL_SERVER_ERROR);
			status.setException(e);
			status.setMessage("Problem executing example action multi web script");
		}

		try {
			MessageService.receiveMessages();
			newNodeRef = MessageService.getNewNodeRef();
			//System.out.println("size of list rec: " + newNodeRef.size());
			for (String nodeRefRec : newNodeRef) {
				recNodeRef1 = new NodeRef(nodeRefRec);
				recNodeRefList.add(recNodeRef1);
				//System.out.println("string::" + nodeRefRec);
			}

			for (NodeRef recNodeRef : recNodeRefList) {
				//System.out.println(":re1 " + recNodeRef);
				System.out.println("Node properties are:" + serviceRegistry.getNodeService().getProperties(recNodeRef));
				serviceRegistry.getNodeService().setType(recNodeRef, SwissReModel.TYPE_SR_DOCTYPE);
				//serviceRegistry.getNodeService().setProperty(recNodeRef, SwissReModel.PROP_SR_GENERALDOC_BOXNUMBER, null);
				logger.debug("Completed the conversion: " + recNodeRef);
			}

		} catch (InterruptedException e) {
			//System.out.println("Cannot Read Message from queue");
			logger.debug("Cannot Read Message from queue....");
			e.printStackTrace();
		}

		return model;
	}

	public static String getConnectionString() {
		return connectionString;
	}

	public static void setConnectionString(String connectionString) {
		BoxnumberUpdateWebscript.connectionString = connectionString;
	}

	public static String getQueueName() {
		return queueName;
	}

	public static void setQueueName(String queueName) {
		BoxnumberUpdateWebscript.queueName = queueName;
	}

	public ServiceRegistry getServiceRegistry() {
		return serviceRegistry;
	}

	public void setServiceRegistry(ServiceRegistry serviceRegistry) {
		this.serviceRegistry = serviceRegistry;
	}

}
